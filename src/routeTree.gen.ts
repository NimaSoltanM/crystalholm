/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as landingRouteRouteImport } from './routes/(landing)/route'
import { Route as ProfileIndexRouteImport } from './routes/profile/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as landingIndexRouteImport } from './routes/(landing)/index'
import { Route as landingCategoriesIndexRouteImport } from './routes/(landing)/categories/index'
import { Route as landingProductProductSlugIndexRouteImport } from './routes/(landing)/product/$productSlug/index'
import { Route as landingCategoriesSubCategorySlugIndexRouteImport } from './routes/(landing)/categories/$subCategorySlug/index'

const landingRouteRoute = landingRouteRouteImport.update({
  id: '/(landing)',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIndexRoute = ProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const landingIndexRoute = landingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => landingRouteRoute,
} as any)
const landingCategoriesIndexRoute = landingCategoriesIndexRouteImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => landingRouteRoute,
} as any)
const landingProductProductSlugIndexRoute =
  landingProductProductSlugIndexRouteImport.update({
    id: '/product/$productSlug/',
    path: '/product/$productSlug/',
    getParentRoute: () => landingRouteRoute,
  } as any)
const landingCategoriesSubCategorySlugIndexRoute =
  landingCategoriesSubCategorySlugIndexRouteImport.update({
    id: '/categories/$subCategorySlug/',
    path: '/categories/$subCategorySlug/',
    getParentRoute: () => landingRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof landingIndexRoute
  '/auth': typeof AuthIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/categories': typeof landingCategoriesIndexRoute
  '/categories/$subCategorySlug': typeof landingCategoriesSubCategorySlugIndexRoute
  '/product/$productSlug': typeof landingProductProductSlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof landingIndexRoute
  '/auth': typeof AuthIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/categories': typeof landingCategoriesIndexRoute
  '/categories/$subCategorySlug': typeof landingCategoriesSubCategorySlugIndexRoute
  '/product/$productSlug': typeof landingProductProductSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(landing)': typeof landingRouteRouteWithChildren
  '/(landing)/': typeof landingIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/profile/': typeof ProfileIndexRoute
  '/(landing)/categories/': typeof landingCategoriesIndexRoute
  '/(landing)/categories/$subCategorySlug/': typeof landingCategoriesSubCategorySlugIndexRoute
  '/(landing)/product/$productSlug/': typeof landingProductProductSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/profile'
    | '/categories'
    | '/categories/$subCategorySlug'
    | '/product/$productSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/profile'
    | '/categories'
    | '/categories/$subCategorySlug'
    | '/product/$productSlug'
  id:
    | '__root__'
    | '/(landing)'
    | '/(landing)/'
    | '/auth/'
    | '/profile/'
    | '/(landing)/categories/'
    | '/(landing)/categories/$subCategorySlug/'
    | '/(landing)/product/$productSlug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  landingRouteRoute: typeof landingRouteRouteWithChildren
  AuthIndexRoute: typeof AuthIndexRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(landing)': {
      id: '/(landing)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof landingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(landing)/': {
      id: '/(landing)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof landingIndexRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(landing)/categories/': {
      id: '/(landing)/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof landingCategoriesIndexRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(landing)/product/$productSlug/': {
      id: '/(landing)/product/$productSlug/'
      path: '/product/$productSlug'
      fullPath: '/product/$productSlug'
      preLoaderRoute: typeof landingProductProductSlugIndexRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(landing)/categories/$subCategorySlug/': {
      id: '/(landing)/categories/$subCategorySlug/'
      path: '/categories/$subCategorySlug'
      fullPath: '/categories/$subCategorySlug'
      preLoaderRoute: typeof landingCategoriesSubCategorySlugIndexRouteImport
      parentRoute: typeof landingRouteRoute
    }
  }
}

interface landingRouteRouteChildren {
  landingIndexRoute: typeof landingIndexRoute
  landingCategoriesIndexRoute: typeof landingCategoriesIndexRoute
  landingCategoriesSubCategorySlugIndexRoute: typeof landingCategoriesSubCategorySlugIndexRoute
  landingProductProductSlugIndexRoute: typeof landingProductProductSlugIndexRoute
}

const landingRouteRouteChildren: landingRouteRouteChildren = {
  landingIndexRoute: landingIndexRoute,
  landingCategoriesIndexRoute: landingCategoriesIndexRoute,
  landingCategoriesSubCategorySlugIndexRoute:
    landingCategoriesSubCategorySlugIndexRoute,
  landingProductProductSlugIndexRoute: landingProductProductSlugIndexRoute,
}

const landingRouteRouteWithChildren = landingRouteRoute._addFileChildren(
  landingRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  landingRouteRoute: landingRouteRouteWithChildren,
  AuthIndexRoute: AuthIndexRoute,
  ProfileIndexRoute: ProfileIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
